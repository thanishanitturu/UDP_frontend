{"ast":null,"code":"var _jsxFileName = \"/home/rguktrkvalley/my_new_project/frontend/src/components/sideComponents/Discussions.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import Sidebar from \"../sidebar\";\n// import Modal from \"react-modal\";\n// import \"../../assets/Discussions.module.css\";\n// import { useUser } from \"../../context/UserContext\"; // Import the UserContext\n\n// const DiscussionForum = () => {\n//     const { user } = useUser();\n//   const [threads, setThreads] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedThread, setSelectedThread] = useState(null);\n//   const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchThreads();\n//   }, []);\n\n//   const fetchThreads = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/threads\");\n//       setThreads(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching threads:\", error);\n//     }\n//   };\n\n//   const handleLikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/like`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking thread:\", error);\n//     }\n//   };\n\n//   const handleDislikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/dislike`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking thread:\", error);\n//     }\n//   };\n\n//   const handleCreateThread = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:5000/api/threads\",\n//         { title, content },\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads([response.data.thread, ...threads]);\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setIsModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error creating thread:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"flex\">\n//       <Sidebar userType={user.userType} userId={user?._id}/>\n//       <div className=\"flex-1 p-6 ml-64\">\n//         <div className=\"flex justify-between mb-4\">\n//           <h1 className=\"text-2xl font-bold\">Discussion Forum</h1>\n//           {user && (\n//             <button\n//               onClick={() => setIsModalOpen(true)}\n//               className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//             >\n//               Create Discussion\n//             </button>\n//           )}\n//         </div>\n//         <div>\n//           {threads.map((thread) => (\n//             <div\n//               key={thread._id}\n//               className=\"border p-3 mb-2 rounded shadow cursor-pointer\"\n//               onClick={() => {\n//                 setSelectedThread(thread);\n//                 setReplyModalOpen(true);\n//               }}\n//             >\n//               <h2 className=\"font-semibold\">{thread.title}</h2>\n//               <p>{thread.content}</p>\n//               <small className=\"text-gray-600\">by {thread.author}</small>\n//               <div className=\"mt-2\">\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleLikeThread(thread._id);\n//                   }}\n//                   className=\"bg-green-500 text-white p-1 rounded mr-2\"\n//                 >\n//                   Like ({thread.likes.length})\n//                 </button>\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleDislikeThread(thread._id);\n//                   }}\n//                   className=\"bg-red-500 text-white p-1 rounded\"\n//                 >\n//                   Dislike ({thread.dislikes.length})\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Create Discussion Modal */}\n//       <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n//         <h2 className=\"text-xl font-bold mb-2\">Create a New Discussion</h2>\n//         <form onSubmit={handleCreateThread}>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Thread Title\"\n//             value={title}\n//             onChange={(e) => setTitle(e.target.value)}\n//             className=\"w-full p-2 border rounded mb-2\"\n//             required\n//           />\n//           <textarea\n//             placeholder=\"Thread Content\"\n//             value={content}\n//             onChange={(e) => setContent(e.target.value)}\n//             className=\"w-full p-2 border rounded mb-2\"\n//             required\n//           ></textarea>\n//           <button type=\"submit\" className=\"bg-blue-500 text-white p-2 rounded w-full\">\n//             Create\n//           </button>\n//         </form>\n//       </Modal>\n\n//       {/* Reply Modal */}\n//       <Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}>\n//         {selectedThread && (\n//           <div>\n//             <h2 className=\"text-xl font-bold\">{selectedThread.title}</h2>\n//             <p>{selectedThread.content}</p>\n//             <small className=\"text-gray-600\">by {selectedThread.author}</small>\n//             <div className=\"mt-2\">\n//               <button\n//                 onClick={() => handleLikeThread(selectedThread._id)}\n//                 className=\"bg-green-500 text-white p-1 rounded mr-2\"\n//               >\n//                 Like ({selectedThread.likes.length})\n//               </button>\n//               <button\n//                 onClick={() => handleDislikeThread(selectedThread._id)}\n//                 className=\"bg-red-500 text-white p-1 rounded\"\n//               >\n//                 Dislike ({selectedThread.dislikes.length})\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default DiscussionForum;\n\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import Sidebar from \"../sidebar\";\n// import Modal from \"react-modal\";\n// import \"../../assets/Discussions.module.css\";\n// import { useUser } from \"../../context/UserContext\";\n\n// const DiscussionForum = () => {\n//   const { user } = useUser();\n//   const [threads, setThreads] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedThread, setSelectedThread] = useState(null);\n//   const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchThreads();\n//   }, []);\n\n//   const fetchThreads = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/threads\");\n//       setThreads(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching threads:\", error);\n//     }\n//   };\n\n//   const handleLikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/like`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking thread:\", error);\n//     }\n//   };\n\n//   const handleDislikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/dislike`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking thread:\", error);\n//     }\n//   };\n\n//   const handleCreateThread = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:5000/api/threads\",\n//         { title, content },\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads([response.data.thread, ...threads]);\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setIsModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error creating thread:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"discussionContainer\">\n//       <Sidebar userType={user.userType} userId={user?._id} />\n//       <div className=\"mainDiscussion\">\n//         <div className=\"discussionHeader\">\n//           <h1>Discussion Forum</h1>\n//           {user && (\n//             <button\n//               onClick={() => setIsModalOpen(true)}\n//               className=\"createButton\"\n//             >\n//               Create Discussion\n//             </button>\n//           )}\n//         </div>\n//         <div className=\"threadList\">\n//           {threads.map((thread) => (\n//             <div\n//               key={thread._id}\n//               className=\"threadCard\"\n//               onClick={() => {\n//                 setSelectedThread(thread);\n//                 setReplyModalOpen(true);\n//               }}\n//             >\n//               <h2>{thread.title}</h2>\n//               <p>{thread.content}</p>\n//               <small className=\"threadAuthor\">by {thread.author}</small>\n//               <div className=\"mt-2\">\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleLikeThread(thread._id);\n//                   }}\n//                   className=\"likeButton\"\n//                 >\n//                   Like ({thread.likes.length})\n//                 </button>\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleDislikeThread(thread._id);\n//                   }}\n//                   className=\"dislikeButton\"\n//                 >\n//                   Dislike ({thread.dislikes.length})\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Create Discussion Modal */}\n//       <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n//         <div className=\"modalContent\">\n//           <h2>Create a New Discussion</h2>\n//           <form onSubmit={handleCreateThread}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Thread Title\"\n//               value={title}\n//               onChange={(e) => setTitle(e.target.value)}\n//               className=\"w-full p-2 border rounded mb-2\"\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Thread Content\"\n//               value={content}\n//               onChange={(e) => setContent(e.target.value)}\n//               className=\"w-full p-2 border rounded mb-2\"\n//               required\n//             ></textarea>\n//             <button type=\"submit\" className=\"createButton\">\n//               Create\n//             </button>\n//           </form>\n//         </div>\n//       </Modal>\n\n//       {/* Reply Modal */}\n//       <Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}>\n//         {selectedThread && (\n//           <div className=\"modalContent\">\n//             <h2>{selectedThread.title}</h2>\n//             <p>{selectedThread.content}</p>\n//             <small className=\"threadAuthor\">by {selectedThread.author}</small>\n//             <div className=\"mt-2\">\n//               <button\n//                 onClick={() => handleLikeThread(selectedThread._id)}\n//                 className=\"likeButton\"\n//               >\n//                 Like ({selectedThread.likes.length})\n//               </button>\n//               <button\n//                 onClick={() => handleDislikeThread(selectedThread._id)}\n//                 className=\"dislikeButton\"\n//               >\n//                 Dislike ({selectedThread.dislikes.length})\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default DiscussionForum;\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Sidebar from \"../sidebar\";\nimport Modal from \"react-modal\";\nimport \"../../assets/Discussions.module.css\";\nimport { useUser } from \"../../context/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiscussionForum = () => {\n  _s();\n  const {\n    user\n  } = useUser();\n  const [threads, setThreads] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedThread, setSelectedThread] = useState(null);\n  const [replyModalOpen, setReplyModalOpen] = useState(false);\n  useEffect(() => {\n    fetchThreads();\n  }, []);\n  const fetchThreads = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/threads\");\n      setThreads(response.data);\n    } catch (error) {\n      console.error(\"Error fetching threads:\", error);\n    }\n  };\n  const handleLikeThread = async threadId => {\n    try {\n      const response = await axios.post(`http://localhost:5000/api/threads/${threadId}/like`, {}, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setThreads(prevThreads => prevThreads.map(thread => thread._id === threadId ? {\n        ...thread,\n        likes: response.data.thread.likes\n      } : thread));\n    } catch (error) {\n      console.error(\"Error liking thread:\", error);\n    }\n  };\n  const handleDislikeThread = async threadId => {\n    try {\n      const response = await axios.post(`http://localhost:5000/api/threads/${threadId}/dislike`, {}, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setThreads(prevThreads => prevThreads.map(thread => thread._id === threadId ? {\n        ...thread,\n        dislikes: response.data.thread.dislikes\n      } : thread));\n    } catch (error) {\n      console.error(\"Error disliking thread:\", error);\n    }\n  };\n  const handleCreateThread = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://localhost:5000/api/threads\", {\n        title,\n        content\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setThreads([response.data.thread, ...threads]);\n      setTitle(\"\");\n      setContent(\"\");\n      setIsModalOpen(false);\n    } catch (error) {\n      console.error(\"Error creating thread:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"discussionContainer\",\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      userType: user.userType,\n      userId: user === null || user === void 0 ? void 0 : user._id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainDiscussion\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"discussionHeader\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Discussion Forum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }, this), user && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsModalOpen(true),\n          className: \"createButton\",\n          children: \"Create Discussion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"threadList\",\n        children: threads.map(thread => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"threadCard\",\n          onClick: () => {\n            setSelectedThread(thread);\n            setReplyModalOpen(true);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: thread.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: thread.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            className: \"threadAuthor\",\n            children: [\"by \", thread.author]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => {\n                e.stopPropagation();\n                handleLikeThread(thread._id);\n              },\n              className: \"likeButton\",\n              children: [\"Like (\", thread.likes.length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 490,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => {\n                e.stopPropagation();\n                handleDislikeThread(thread._id);\n              },\n              className: \"dislikeButton\",\n              children: [\"Dislike (\", thread.dislikes.length, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 489,\n            columnNumber: 15\n          }, this)]\n        }, thread._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 478,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modalContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Create a New Discussion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleCreateThread,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Thread Title\",\n            value: title,\n            onChange: e => setTitle(e.target.value),\n            className: \"w-full p-2 border rounded mb-2\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 519,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            placeholder: \"Thread Content\",\n            value: content,\n            onChange: e => setContent(e.target.value),\n            className: \"w-full p-2 border rounded mb-2\",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"createButton\",\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 534,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: replyModalOpen,\n      onRequestClose: () => setReplyModalOpen(false),\n      children: selectedThread && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modalContent\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedThread.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedThread.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 546,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          className: \"threadAuthor\",\n          children: [\"by \", selectedThread.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleLikeThread(selectedThread._id),\n            className: \"likeButton\",\n            children: [\"Like (\", selectedThread.likes.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 549,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDislikeThread(selectedThread._id),\n            className: \"dislikeButton\",\n            children: [\"Dislike (\", selectedThread.dislikes.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 542,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 462,\n    columnNumber: 5\n  }, this);\n};\n_s(DiscussionForum, \"TXtC8pydlqLq4n0jlDAL40zF7oM=\", false, function () {\n  return [useUser];\n});\n_c = DiscussionForum;\nexport default DiscussionForum;\nvar _c;\n$RefreshReg$(_c, \"DiscussionForum\");","map":{"version":3,"names":["React","useEffect","useState","axios","Sidebar","Modal","useUser","jsxDEV","_jsxDEV","DiscussionForum","_s","user","threads","setThreads","title","setTitle","content","setContent","isModalOpen","setIsModalOpen","selectedThread","setSelectedThread","replyModalOpen","setReplyModalOpen","fetchThreads","response","get","data","error","console","handleLikeThread","threadId","post","headers","Authorization","token","prevThreads","map","thread","_id","likes","handleDislikeThread","dislikes","handleCreateThread","e","preventDefault","className","children","userType","userId","fileName","_jsxFileName","lineNumber","columnNumber","onClick","author","stopPropagation","length","isOpen","onRequestClose","onSubmit","type","placeholder","value","onChange","target","required","_c","$RefreshReg$"],"sources":["/home/rguktrkvalley/my_new_project/frontend/src/components/sideComponents/Discussions.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import Sidebar from \"../sidebar\";\n// import Modal from \"react-modal\";\n// import \"../../assets/Discussions.module.css\";\n// import { useUser } from \"../../context/UserContext\"; // Import the UserContext\n\n\n// const DiscussionForum = () => {\n//     const { user } = useUser();\n//   const [threads, setThreads] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedThread, setSelectedThread] = useState(null);\n//   const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchThreads();\n//   }, []);\n\n//   const fetchThreads = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/threads\");\n//       setThreads(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching threads:\", error);\n//     }\n//   };\n\n//   const handleLikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/like`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking thread:\", error);\n//     }\n//   };\n\n//   const handleDislikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/dislike`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking thread:\", error);\n//     }\n//   };\n\n//   const handleCreateThread = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:5000/api/threads\",\n//         { title, content },\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads([response.data.thread, ...threads]);\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setIsModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error creating thread:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"flex\">\n//       <Sidebar userType={user.userType} userId={user?._id}/>\n//       <div className=\"flex-1 p-6 ml-64\">\n//         <div className=\"flex justify-between mb-4\">\n//           <h1 className=\"text-2xl font-bold\">Discussion Forum</h1>\n//           {user && (\n//             <button\n//               onClick={() => setIsModalOpen(true)}\n//               className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//             >\n//               Create Discussion\n//             </button>\n//           )}\n//         </div>\n//         <div>\n//           {threads.map((thread) => (\n//             <div\n//               key={thread._id}\n//               className=\"border p-3 mb-2 rounded shadow cursor-pointer\"\n//               onClick={() => {\n//                 setSelectedThread(thread);\n//                 setReplyModalOpen(true);\n//               }}\n//             >\n//               <h2 className=\"font-semibold\">{thread.title}</h2>\n//               <p>{thread.content}</p>\n//               <small className=\"text-gray-600\">by {thread.author}</small>\n//               <div className=\"mt-2\">\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleLikeThread(thread._id);\n//                   }}\n//                   className=\"bg-green-500 text-white p-1 rounded mr-2\"\n//                 >\n//                   Like ({thread.likes.length})\n//                 </button>\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleDislikeThread(thread._id);\n//                   }}\n//                   className=\"bg-red-500 text-white p-1 rounded\"\n//                 >\n//                   Dislike ({thread.dislikes.length})\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Create Discussion Modal */}\n//       <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n//         <h2 className=\"text-xl font-bold mb-2\">Create a New Discussion</h2>\n//         <form onSubmit={handleCreateThread}>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Thread Title\"\n//             value={title}\n//             onChange={(e) => setTitle(e.target.value)}\n//             className=\"w-full p-2 border rounded mb-2\"\n//             required\n//           />\n//           <textarea\n//             placeholder=\"Thread Content\"\n//             value={content}\n//             onChange={(e) => setContent(e.target.value)}\n//             className=\"w-full p-2 border rounded mb-2\"\n//             required\n//           ></textarea>\n//           <button type=\"submit\" className=\"bg-blue-500 text-white p-2 rounded w-full\">\n//             Create\n//           </button>\n//         </form>\n//       </Modal>\n\n//       {/* Reply Modal */}\n//       <Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}>\n//         {selectedThread && (\n//           <div>\n//             <h2 className=\"text-xl font-bold\">{selectedThread.title}</h2>\n//             <p>{selectedThread.content}</p>\n//             <small className=\"text-gray-600\">by {selectedThread.author}</small>\n//             <div className=\"mt-2\">\n//               <button\n//                 onClick={() => handleLikeThread(selectedThread._id)}\n//                 className=\"bg-green-500 text-white p-1 rounded mr-2\"\n//               >\n//                 Like ({selectedThread.likes.length})\n//               </button>\n//               <button\n//                 onClick={() => handleDislikeThread(selectedThread._id)}\n//                 className=\"bg-red-500 text-white p-1 rounded\"\n//               >\n//                 Dislike ({selectedThread.dislikes.length})\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default DiscussionForum;\n\n\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import Sidebar from \"../sidebar\";\n// import Modal from \"react-modal\";\n// import \"../../assets/Discussions.module.css\";\n// import { useUser } from \"../../context/UserContext\";\n\n// const DiscussionForum = () => {\n//   const { user } = useUser();\n//   const [threads, setThreads] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedThread, setSelectedThread] = useState(null);\n//   const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchThreads();\n//   }, []);\n\n//   const fetchThreads = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/threads\");\n//       setThreads(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching threads:\", error);\n//     }\n//   };\n\n//   const handleLikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/like`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking thread:\", error);\n//     }\n//   };\n\n//   const handleDislikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/dislike`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking thread:\", error);\n//     }\n//   };\n\n//   const handleCreateThread = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:5000/api/threads\",\n//         { title, content },\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads([response.data.thread, ...threads]);\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setIsModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error creating thread:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"discussionContainer\">\n//       <Sidebar userType={user.userType} userId={user?._id} />\n//       <div className=\"mainDiscussion\">\n//         <div className=\"discussionHeader\">\n//           <h1>Discussion Forum</h1>\n//           {user && (\n//             <button\n//               onClick={() => setIsModalOpen(true)}\n//               className=\"createButton\"\n//             >\n//               Create Discussion\n//             </button>\n//           )}\n//         </div>\n//         <div className=\"threadList\">\n//           {threads.map((thread) => (\n//             <div\n//               key={thread._id}\n//               className=\"threadCard\"\n//               onClick={() => {\n//                 setSelectedThread(thread);\n//                 setReplyModalOpen(true);\n//               }}\n//             >\n//               <h2>{thread.title}</h2>\n//               <p>{thread.content}</p>\n//               <small className=\"threadAuthor\">by {thread.author}</small>\n//               <div className=\"mt-2\">\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleLikeThread(thread._id);\n//                   }}\n//                   className=\"likeButton\"\n//                 >\n//                   Like ({thread.likes.length})\n//                 </button>\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleDislikeThread(thread._id);\n//                   }}\n//                   className=\"dislikeButton\"\n//                 >\n//                   Dislike ({thread.dislikes.length})\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Create Discussion Modal */}\n//       <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n//         <div className=\"modalContent\">\n//           <h2>Create a New Discussion</h2>\n//           <form onSubmit={handleCreateThread}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Thread Title\"\n//               value={title}\n//               onChange={(e) => setTitle(e.target.value)}\n//               className=\"w-full p-2 border rounded mb-2\"\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Thread Content\"\n//               value={content}\n//               onChange={(e) => setContent(e.target.value)}\n//               className=\"w-full p-2 border rounded mb-2\"\n//               required\n//             ></textarea>\n//             <button type=\"submit\" className=\"createButton\">\n//               Create\n//             </button>\n//           </form>\n//         </div>\n//       </Modal>\n\n//       {/* Reply Modal */}\n//       <Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}>\n//         {selectedThread && (\n//           <div className=\"modalContent\">\n//             <h2>{selectedThread.title}</h2>\n//             <p>{selectedThread.content}</p>\n//             <small className=\"threadAuthor\">by {selectedThread.author}</small>\n//             <div className=\"mt-2\">\n//               <button\n//                 onClick={() => handleLikeThread(selectedThread._id)}\n//                 className=\"likeButton\"\n//               >\n//                 Like ({selectedThread.likes.length})\n//               </button>\n//               <button\n//                 onClick={() => handleDislikeThread(selectedThread._id)}\n//                 className=\"dislikeButton\"\n//               >\n//                 Dislike ({selectedThread.dislikes.length})\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default DiscussionForum;\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Sidebar from \"../sidebar\";\nimport Modal from \"react-modal\";\nimport \"../../assets/Discussions.module.css\";\nimport { useUser } from \"../../context/UserContext\";\n\nconst DiscussionForum = () => {\n  const { user } = useUser();\n  const [threads, setThreads] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedThread, setSelectedThread] = useState(null);\n  const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n  useEffect(() => {\n    fetchThreads();\n  }, []);\n\n  const fetchThreads = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/threads\");\n      setThreads(response.data);\n    } catch (error) {\n      console.error(\"Error fetching threads:\", error);\n    }\n  };\n\n  const handleLikeThread = async (threadId) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:5000/api/threads/${threadId}/like`,\n        {},\n        { headers: { Authorization: `Bearer ${user.token}` } }\n      );\n      setThreads((prevThreads) =>\n        prevThreads.map((thread) =>\n          thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n        )\n      );\n    } catch (error) {\n      console.error(\"Error liking thread:\", error);\n    }\n  };\n\n  const handleDislikeThread = async (threadId) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:5000/api/threads/${threadId}/dislike`,\n        {},\n        { headers: { Authorization: `Bearer ${user.token}` } }\n      );\n      setThreads((prevThreads) =>\n        prevThreads.map((thread) =>\n          thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n        )\n      );\n    } catch (error) {\n      console.error(\"Error disliking thread:\", error);\n    }\n  };\n\n  const handleCreateThread = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\n        \"http://localhost:5000/api/threads\",\n        { title, content },\n        { headers: { Authorization: `Bearer ${user.token}` } }\n      );\n      setThreads([response.data.thread, ...threads]);\n      setTitle(\"\");\n      setContent(\"\");\n      setIsModalOpen(false);\n    } catch (error) {\n      console.error(\"Error creating thread:\", error);\n    }\n  };\n\n  return (\n    <div className=\"discussionContainer\">\n      <Sidebar userType={user.userType} userId={user?._id} />\n      <div className=\"mainDiscussion\">\n        <div className=\"discussionHeader\">\n          <h1>Discussion Forum</h1>\n          {user && (\n            <button\n              onClick={() => setIsModalOpen(true)}\n              className=\"createButton\"\n            >\n              Create Discussion\n            </button>\n          )}\n        </div>\n        <div className=\"threadList\">\n          {threads.map((thread) => (\n            <div\n              key={thread._id}\n              className=\"threadCard\"\n              onClick={() => {\n                setSelectedThread(thread);\n                setReplyModalOpen(true);\n              }}\n            >\n              <h2>{thread.title}</h2>\n              <p>{thread.content}</p>\n              <small className=\"threadAuthor\">by {thread.author}</small>\n              <div className=\"mt-2\">\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleLikeThread(thread._id);\n                  }}\n                  className=\"likeButton\"\n                >\n                  Like ({thread.likes.length})\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    handleDislikeThread(thread._id);\n                  }}\n                  className=\"dislikeButton\"\n                >\n                  Dislike ({thread.dislikes.length})\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Create Discussion Modal */}\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n        <div className=\"modalContent\">\n          <h2>Create a New Discussion</h2>\n          <form onSubmit={handleCreateThread}>\n            <input\n              type=\"text\"\n              placeholder=\"Thread Title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              className=\"w-full p-2 border rounded mb-2\"\n              required\n            />\n            <textarea\n              placeholder=\"Thread Content\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              className=\"w-full p-2 border rounded mb-2\"\n              required\n            ></textarea>\n            <button type=\"submit\" className=\"createButton\">\n              Create\n            </button>\n          </form>\n        </div>\n      </Modal>\n\n      {/* Reply Modal */}\n      <Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}>\n        {selectedThread && (\n          <div className=\"modalContent\">\n            <h2>{selectedThread.title}</h2>\n            <p>{selectedThread.content}</p>\n            <small className=\"threadAuthor\">by {selectedThread.author}</small>\n            <div className=\"mt-2\">\n              <button\n                onClick={() => handleLikeThread(selectedThread._id)}\n                className=\"likeButton\"\n              >\n                Like ({selectedThread.likes.length})\n              </button>\n              <button\n                onClick={() => handleDislikeThread(selectedThread._id)}\n                className=\"dislikeButton\"\n              >\n                Dislike ({selectedThread.dislikes.length})\n              </button>\n            </div>\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default DiscussionForum;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAO,qCAAqC;AAC5C,SAASC,OAAO,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAK,CAAC,GAAGL,OAAO,CAAC,CAAC;EAC1B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}