{"ast":null,"code":"var _jsxFileName = \"/home/rguktrkvalley/my_new_project/frontend/src/components/sideComponents/Discussions.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import Sidebar from \"../sidebar\";\n// import Modal from \"react-modal\";\n// import styles from \"../../assets/Discussions.module.css\";\n// import { useUser } from \"../../context/UserContext\";\n// import { FaThumbsUp, FaThumbsDown } from \"react-icons/fa\";\n\n// const DiscussionForum = () => {\n//   const { user } = useUser();\n//   const [threads, setThreads] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedThread, setSelectedThread] = useState(null);\n//   const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchThreads();\n//   }, []);\n\n//   const fetchThreads = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/threads\");\n//       setThreads(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching threads:\", error);\n//     }\n//   };\n\n//   const handleLikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/threads/${threadId}/like`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n\n//       );\n//       console.log(response)\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking thread:\", error);\n//     }\n//   };\n\n//   const handleDislikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/threads/${threadId}/dislike`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking thread:\", error);\n//     }\n//   };\n\n//   const handleCreateThread = async (e) => {\n//     e.preventDefault();\n//     try {\n//         const author=user.userName\n//         const authorId=user.id\n//       const response = await axios.post(\n//         \"http://localhost:5000/threads\",\n//         { title, content ,author,authorId},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       console.log(response.data)\n//       setThreads([response.data.newThread, ...threads]);\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setIsModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error creating thread:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className={styles.discussionContainer}>\n//       <Sidebar userType={user.userType} userId={user?._id} />\n//       <div className={styles.mainDiscussion}>\n//         <div className={styles.discussionHeader}>\n//           <h1>Discussion Forum</h1>\n//           {user && (\n//             <button\n//               onClick={() => setIsModalOpen(true)}\n//               className={styles.createButton}\n//             >\n//               Create Discussion\n//             </button>\n//           )}\n//         </div>\n//        <div className={styles.threadList}>\n//   {Array.isArray(threads) && threads.length > 0 ? (\n//     threads.map((thread) => (\n//       <div\n//         key={thread._id || Math.random()}\n//         className={styles.threadCard}\n//         onClick={() => {\n//           setSelectedThread(thread);\n//           setReplyModalOpen(true);\n//         }}\n//       >\n//         <h2>{thread.title}</h2>\n//         <p>{thread.content}</p>\n//         <small className={styles.threadAuthor}>by {thread.author}</small>\n//         <div className=\"mt-2\">\n//           <button\n//             onClick={(e) => {\n//               e.stopPropagation();\n//               console.log(thread)\n//               handleLikeThread(thread._id);\n//             }}\n//             className={styles.likeButton}\n//           >\n//             <FaThumbsUp/>({Array.isArray(thread.likes) ? thread.likes.length : 0})\n//           </button>\n//           <button\n//             onClick={(e) => {\n//               e.stopPropagation();\n//               handleDislikeThread(thread._id);\n//             }}\n//             className={styles.dislikeButton}\n//           >\n//             <FaThumbsDown/> ({Array.isArray(thread.dislikes) ? thread.dislikes.length : 0})\n//           </button>\n//         </div>\n//       </div>\n//     ))\n//   ) : (\n//     <p>No discussions available.</p>\n//   )}\n// </div>\n\n//       </div>\n\n//       <Modal\n//   isOpen={isModalOpen}\n//   onRequestClose={() => setIsModalOpen(false)}\n//   className={styles.modalContent}\n//   overlayClassName={styles.modalOverlay}\n// >\n//   <div className={styles.modalContent}>\n//     <h2>Create a New Discussion</h2>\n//     <form onSubmit={handleCreateThread}>\n//       <div className={styles.formGroup}>\n//         <label>Thread Title</label>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <div className={styles.formGroup}>\n//         <label>Thread Content</label>\n//         <textarea\n//           placeholder=\"Enter content\"\n//           value={content}\n//           onChange={(e) => setContent(e.target.value)}\n//           required\n//         ></textarea>\n//       </div>\n//       <div className={styles.modalActions}>\n//         <button type=\"button\" onClick={() => setIsModalOpen(false)}>\n//           Cancel\n//         </button>\n//         <button type=\"submit\">Create</button>\n//       </div>\n//     </form>\n//   </div>\n// </Modal>;\n\n//       {/* Reply Modal */}\n//       {/*<Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}\n//         >\n//         {selectedThread && (\n//           <div className={styles.modalContent}>\n//             <h2>{selectedThread.title}</h2>\n//             <p>{selectedThread.content}</p>\n//             <small className={styles.threadAuthor}>by {selectedThread.author}</small>\n//             <div className=\"mt-2\">\n//               <button\n//                 onClick={() => handleLikeThread(selectedThread._id)}\n//                 className={styles.likeButton}\n//               >\n//                 Like ({selectedThread.likes.length})\n//               </button>\n//               <button\n//                 onClick={() => handleDislikeThread(selectedThread._id)}\n//                 className={styles.dislikeButton}\n//               >\n//                 Dislike ({selectedThread.dislikes.length})\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </Modal>*/\n//     </div>\n//   );\n// };\n\n// export default DiscussionForum;\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Sidebar from \"../sidebar\";\nimport Modal from \"react-modal\";\nimport styles from \"../../assets/Discussions.module.css\";\nimport { useUser } from \"../../context/UserContext\";\nimport { FaThumbsUp, FaThumbsDown } from \"react-icons/fa\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiscussionForum = () => {\n  _s();\n  const {\n    user\n  } = useUser();\n  const [threads, setThreads] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedThread, setSelectedThread] = useState(null);\n  const [replyContent, setReplyContent] = useState(\"\"); // State for reply input\n  const [expandedThreadId, setExpandedThreadId] = useState(null); // Track which thread is expanded\n\n  useEffect(() => {\n    fetchThreads();\n  }, []);\n  const fetchThreads = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/threads\");\n      setThreads(response.data);\n    } catch (error) {\n      console.error(\"Error fetching threads:\", error);\n    }\n  };\n  const handleLikeThread = async threadId => {\n    try {\n      const response = await axios.post(`http://localhost:5000/threads/${threadId}/like`, {}, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setThreads(prevThreads => prevThreads.map(thread => thread._id === threadId ? {\n        ...thread,\n        likes: response.data.thread.likes\n      } : thread));\n    } catch (error) {\n      console.error(\"Error liking thread:\", error);\n    }\n  };\n  const handleDislikeThread = async threadId => {\n    try {\n      const response = await axios.post(`http://localhost:5000/threads/${threadId}/dislike`, {}, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setThreads(prevThreads => prevThreads.map(thread => thread._id === threadId ? {\n        ...thread,\n        dislikes: response.data.thread.dislikes\n      } : thread));\n    } catch (error) {\n      console.error(\"Error disliking thread:\", error);\n    }\n  };\n  const handleCreateThread = async e => {\n    e.preventDefault();\n    try {\n      const author = user.userName;\n      const authorId = user.id;\n      const response = await axios.post(\"http://localhost:5000/threads\", {\n        title,\n        content,\n        author,\n        authorId\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setThreads([response.data.newThread, ...threads]);\n      setTitle(\"\");\n      setContent(\"\");\n      setIsModalOpen(false);\n    } catch (error) {\n      console.error(\"Error creating thread:\", error);\n    }\n  };\n  const handleReplySubmit = async threadId => {\n    try {\n      const response = await axios.post(`http://localhost:5000/threads/${threadId}/replies`, {\n        content: replyContent,\n        author: user.userName,\n        authorId: user.id\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setThreads(prevThreads => prevThreads.map(thread => thread._id === threadId ? {\n        ...thread,\n        replies: response.data.thread.replies\n      } : thread));\n      setReplyContent(\"\"); // Clear the reply input\n    } catch (error) {\n      console.error(\"Error submitting reply:\", error);\n    }\n  };\n  const toggleReplies = threadId => {\n    setExpandedThreadId(expandedThreadId === threadId ? null : threadId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.discussionContainer,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      userType: user.userType,\n      userId: user === null || user === void 0 ? void 0 : user._id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.mainDiscussion,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.discussionHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Discussion Forum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), user && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsModalOpen(true),\n          className: styles.createButton,\n          children: \"Create Discussion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.threadList,\n        children: Array.isArray(threads) && threads.length > 0 ? threads.map(thread => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.threadCard,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: thread.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: thread.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            className: styles.threadAuthor,\n            children: [\"by \", thread.author]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.threadActions,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => {\n                e.stopPropagation();\n                handleLikeThread(thread._id);\n              },\n              className: styles.likeButton,\n              children: [/*#__PURE__*/_jsxDEV(FaThumbsUp, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 362,\n                columnNumber: 21\n              }, this), \" (\", Array.isArray(thread.likes) ? thread.likes.length : 0, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => {\n                e.stopPropagation();\n                handleDislikeThread(thread._id);\n              },\n              className: styles.dislikeButton,\n              children: [/*#__PURE__*/_jsxDEV(FaThumbsDown, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 21\n              }, this), \" (\", Array.isArray(thread.dislikes) ? thread.dislikes.length : 0, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => toggleReplies(thread._id),\n              className: styles.replyButton,\n              children: expandedThreadId === thread._id ? \"Hide Replies\" : \"Show Replies\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 17\n          }, this), expandedThreadId === thread._id && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.replySection,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.replyList,\n              children: Array.isArray(thread.replies) && thread.replies.length > 0 ? thread.replies.map(reply => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: styles.replyCard,\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: reply.content\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 29\n                }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n                  className: styles.replyAuthor,\n                  children: [\"by \", reply.author]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 389,\n                  columnNumber: 29\n                }, this)]\n              }, reply._id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 27\n              }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No replies yet.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 393,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 384,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: styles.replyForm,\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                placeholder: \"Write a reply...\",\n                value: replyContent,\n                onChange: e => setReplyContent(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 397,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleReplySubmit(thread._id),\n                className: styles.submitReplyButton,\n                children: \"Submit Reply\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 19\n          }, this)]\n        }, thread._id || Math.random(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 15\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No discussions available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      className: styles.modalContent,\n      overlayClassName: styles.modalOverlay,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.modalContent,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Create a New Discussion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleCreateThread,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.formGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Thread Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter title\",\n              value: title,\n              onChange: e => setTitle(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.formGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Thread Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              placeholder: \"Enter content\",\n              value: content,\n              onChange: e => setContent(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 441,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.modalActions,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setIsModalOpen(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n};\n_s(DiscussionForum, \"NEqGuo5XvA/6UHcyOnfbhMMXsFU=\", false, function () {\n  return [useUser];\n});\n_c = DiscussionForum;\nexport default DiscussionForum;\nvar _c;\n$RefreshReg$(_c, \"DiscussionForum\");","map":{"version":3,"names":["React","useEffect","useState","axios","Sidebar","Modal","styles","useUser","FaThumbsUp","FaThumbsDown","jsxDEV","_jsxDEV","DiscussionForum","_s","user","threads","setThreads","title","setTitle","content","setContent","isModalOpen","setIsModalOpen","selectedThread","setSelectedThread","replyContent","setReplyContent","expandedThreadId","setExpandedThreadId","fetchThreads","response","get","data","error","console","handleLikeThread","threadId","post","headers","Authorization","token","prevThreads","map","thread","_id","likes","handleDislikeThread","dislikes","handleCreateThread","e","preventDefault","author","userName","authorId","id","newThread","handleReplySubmit","replies","toggleReplies","className","discussionContainer","children","userType","userId","fileName","_jsxFileName","lineNumber","columnNumber","mainDiscussion","discussionHeader","onClick","createButton","threadList","Array","isArray","length","threadCard","threadAuthor","threadActions","stopPropagation","likeButton","dislikeButton","replyButton","replySection","replyList","reply","replyCard","replyAuthor","replyForm","placeholder","value","onChange","target","submitReplyButton","Math","random","isOpen","onRequestClose","modalContent","overlayClassName","modalOverlay","onSubmit","formGroup","type","required","modalActions","_c","$RefreshReg$"],"sources":["/home/rguktrkvalley/my_new_project/frontend/src/components/sideComponents/Discussions.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import Sidebar from \"../sidebar\";\n// import Modal from \"react-modal\";\n// import styles from \"../../assets/Discussions.module.css\";\n// import { useUser } from \"../../context/UserContext\";\n// import { FaThumbsUp, FaThumbsDown } from \"react-icons/fa\";\n\n\n// const DiscussionForum = () => {\n//   const { user } = useUser();\n//   const [threads, setThreads] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedThread, setSelectedThread] = useState(null);\n//   const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n\n//   useEffect(() => {\n//     fetchThreads();\n//   }, []);\n\n//   const fetchThreads = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/threads\");\n//       setThreads(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching threads:\", error);\n//     }\n//   };\n\n//   const handleLikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/threads/${threadId}/like`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n        \n//       );\n//       console.log(response)\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking thread:\", error);\n//     }\n//   };\n\n//   const handleDislikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/threads/${threadId}/dislike`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking thread:\", error);\n//     }\n//   };\n\n//   const handleCreateThread = async (e) => {\n//     e.preventDefault();\n//     try {\n//         const author=user.userName\n//         const authorId=user.id\n//       const response = await axios.post(\n//         \"http://localhost:5000/threads\",\n//         { title, content ,author,authorId},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       console.log(response.data)\n//       setThreads([response.data.newThread, ...threads]);\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setIsModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error creating thread:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className={styles.discussionContainer}>\n//       <Sidebar userType={user.userType} userId={user?._id} />\n//       <div className={styles.mainDiscussion}>\n//         <div className={styles.discussionHeader}>\n//           <h1>Discussion Forum</h1>\n//           {user && (\n//             <button\n//               onClick={() => setIsModalOpen(true)}\n//               className={styles.createButton}\n//             >\n//               Create Discussion\n//             </button>\n//           )}\n//         </div>\n//        <div className={styles.threadList}>\n//   {Array.isArray(threads) && threads.length > 0 ? (\n//     threads.map((thread) => (\n//       <div\n//         key={thread._id || Math.random()}\n//         className={styles.threadCard}\n//         onClick={() => {\n//           setSelectedThread(thread);\n//           setReplyModalOpen(true);\n//         }}\n//       >\n//         <h2>{thread.title}</h2>\n//         <p>{thread.content}</p>\n//         <small className={styles.threadAuthor}>by {thread.author}</small>\n//         <div className=\"mt-2\">\n//           <button\n//             onClick={(e) => {\n//               e.stopPropagation();\n//               console.log(thread)\n//               handleLikeThread(thread._id);\n//             }}\n//             className={styles.likeButton}\n//           >\n//             <FaThumbsUp/>({Array.isArray(thread.likes) ? thread.likes.length : 0})\n//           </button>\n//           <button\n//             onClick={(e) => {\n//               e.stopPropagation();\n//               handleDislikeThread(thread._id);\n//             }}\n//             className={styles.dislikeButton}\n//           >\n//             <FaThumbsDown/> ({Array.isArray(thread.dislikes) ? thread.dislikes.length : 0})\n//           </button>\n//         </div>\n//       </div>\n//     ))\n//   ) : (\n//     <p>No discussions available.</p>\n//   )}\n// </div>\n\n\n//       </div>\n\n      \n//       <Modal\n//   isOpen={isModalOpen}\n//   onRequestClose={() => setIsModalOpen(false)}\n//   className={styles.modalContent}\n//   overlayClassName={styles.modalOverlay}\n// >\n//   <div className={styles.modalContent}>\n//     <h2>Create a New Discussion</h2>\n//     <form onSubmit={handleCreateThread}>\n//       <div className={styles.formGroup}>\n//         <label>Thread Title</label>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Enter title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//       </div>\n//       <div className={styles.formGroup}>\n//         <label>Thread Content</label>\n//         <textarea\n//           placeholder=\"Enter content\"\n//           value={content}\n//           onChange={(e) => setContent(e.target.value)}\n//           required\n//         ></textarea>\n//       </div>\n//       <div className={styles.modalActions}>\n//         <button type=\"button\" onClick={() => setIsModalOpen(false)}>\n//           Cancel\n//         </button>\n//         <button type=\"submit\">Create</button>\n//       </div>\n//     </form>\n//   </div>\n// </Modal>;\n\n\n//       {/* Reply Modal */}\n//       {/*<Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}\n//         >\n//         {selectedThread && (\n//           <div className={styles.modalContent}>\n//             <h2>{selectedThread.title}</h2>\n//             <p>{selectedThread.content}</p>\n//             <small className={styles.threadAuthor}>by {selectedThread.author}</small>\n//             <div className=\"mt-2\">\n//               <button\n//                 onClick={() => handleLikeThread(selectedThread._id)}\n//                 className={styles.likeButton}\n//               >\n//                 Like ({selectedThread.likes.length})\n//               </button>\n//               <button\n//                 onClick={() => handleDislikeThread(selectedThread._id)}\n//                 className={styles.dislikeButton}\n//               >\n//                 Dislike ({selectedThread.dislikes.length})\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </Modal>*/\n//     </div>\n//   );\n// };\n\n// export default DiscussionForum;\n\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Sidebar from \"../sidebar\";\nimport Modal from \"react-modal\";\nimport styles from \"../../assets/Discussions.module.css\";\nimport { useUser } from \"../../context/UserContext\";\nimport { FaThumbsUp, FaThumbsDown } from \"react-icons/fa\";\n\nconst DiscussionForum = () => {\n  const { user } = useUser();\n  const [threads, setThreads] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedThread, setSelectedThread] = useState(null);\n  const [replyContent, setReplyContent] = useState(\"\"); // State for reply input\n  const [expandedThreadId, setExpandedThreadId] = useState(null); // Track which thread is expanded\n\n  useEffect(() => {\n    fetchThreads();\n  }, []);\n\n  const fetchThreads = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/threads\");\n      setThreads(response.data);\n    } catch (error) {\n      console.error(\"Error fetching threads:\", error);\n    }\n  };\n\n  const handleLikeThread = async (threadId) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:5000/threads/${threadId}/like`,\n        {},\n        { headers: { Authorization: `Bearer ${user.token}` } }\n      );\n      setThreads((prevThreads) =>\n        prevThreads.map((thread) =>\n          thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n        )\n      );\n    } catch (error) {\n      console.error(\"Error liking thread:\", error);\n    }\n  };\n\n  const handleDislikeThread = async (threadId) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:5000/threads/${threadId}/dislike`,\n        {},\n        { headers: { Authorization: `Bearer ${user.token}` } }\n      );\n      setThreads((prevThreads) =>\n        prevThreads.map((thread) =>\n          thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n        )\n      );\n    } catch (error) {\n      console.error(\"Error disliking thread:\", error);\n    }\n  };\n\n  const handleCreateThread = async (e) => {\n    e.preventDefault();\n    try {\n      const author = user.userName;\n      const authorId = user.id;\n      const response = await axios.post(\n        \"http://localhost:5000/threads\",\n        { title, content, author, authorId },\n        { headers: { Authorization: `Bearer ${user.token}` } }\n      );\n      setThreads([response.data.newThread, ...threads]);\n      setTitle(\"\");\n      setContent(\"\");\n      setIsModalOpen(false);\n    } catch (error) {\n      console.error(\"Error creating thread:\", error);\n    }\n  };\n\n  const handleReplySubmit = async (threadId) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:5000/threads/${threadId}/replies`,\n        { content: replyContent, author: user.userName, authorId: user.id },\n        { headers: { Authorization: `Bearer ${user.token}` } }\n      );\n      setThreads((prevThreads) =>\n        prevThreads.map((thread) =>\n          thread._id === threadId\n            ? { ...thread, replies: response.data.thread.replies }\n            : thread\n        )\n      );\n      setReplyContent(\"\"); // Clear the reply input\n    } catch (error) {\n      console.error(\"Error submitting reply:\", error);\n    }\n  };\n\n  const toggleReplies = (threadId) => {\n    setExpandedThreadId(expandedThreadId === threadId ? null : threadId);\n  };\n\n  return (\n    <div className={styles.discussionContainer}>\n      <Sidebar userType={user.userType} userId={user?._id} />\n      <div className={styles.mainDiscussion}>\n        <div className={styles.discussionHeader}>\n          <h1>Discussion Forum</h1>\n          {user && (\n            <button\n              onClick={() => setIsModalOpen(true)}\n              className={styles.createButton}\n            >\n              Create Discussion\n            </button>\n          )}\n        </div>\n        <div className={styles.threadList}>\n          {Array.isArray(threads) && threads.length > 0 ? (\n            threads.map((thread) => (\n              <div\n                key={thread._id || Math.random()}\n                className={styles.threadCard}\n              >\n                <h2>{thread.title}</h2>\n                <p>{thread.content}</p>\n                <small className={styles.threadAuthor}>by {thread.author}</small>\n                <div className={styles.threadActions}>\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleLikeThread(thread._id);\n                    }}\n                    className={styles.likeButton}\n                  >\n                    <FaThumbsUp /> ({Array.isArray(thread.likes) ? thread.likes.length : 0})\n                  </button>\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleDislikeThread(thread._id);\n                    }}\n                    className={styles.dislikeButton}\n                  >\n                    <FaThumbsDown /> ({Array.isArray(thread.dislikes) ? thread.dislikes.length : 0})\n                  </button>\n                  <button\n                    onClick={() => toggleReplies(thread._id)}\n                    className={styles.replyButton}\n                  >\n                    {expandedThreadId === thread._id ? \"Hide Replies\" : \"Show Replies\"}\n                  </button>\n                </div>\n\n                {/* Reply Section */}\n                {expandedThreadId === thread._id && (\n                  <div className={styles.replySection}>\n                    <div className={styles.replyList}>\n                      {Array.isArray(thread.replies) && thread.replies.length > 0 ? (\n                        thread.replies.map((reply) => (\n                          <div key={reply._id} className={styles.replyCard}>\n                            <p>{reply.content}</p>\n                            <small className={styles.replyAuthor}>by {reply.author}</small>\n                          </div>\n                        ))\n                      ) : (\n                        <p>No replies yet.</p>\n                      )}\n                    </div>\n                    <div className={styles.replyForm}>\n                      <textarea\n                        placeholder=\"Write a reply...\"\n                        value={replyContent}\n                        onChange={(e) => setReplyContent(e.target.value)}\n                      />\n                      <button\n                        onClick={() => handleReplySubmit(thread._id)}\n                        className={styles.submitReplyButton}\n                      >\n                        Submit Reply\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))\n          ) : (\n            <p>No discussions available.</p>\n          )}\n        </div>\n      </div>\n\n      {/* Create Discussion Modal */}\n      <Modal\n        isOpen={isModalOpen}\n        onRequestClose={() => setIsModalOpen(false)}\n        className={styles.modalContent}\n        overlayClassName={styles.modalOverlay}\n      >\n        <div className={styles.modalContent}>\n          <h2>Create a New Discussion</h2>\n          <form onSubmit={handleCreateThread}>\n            <div className={styles.formGroup}>\n              <label>Thread Title</label>\n              <input\n                type=\"text\"\n                placeholder=\"Enter title\"\n                value={title}\n                onChange={(e) => setTitle(e.target.value)}\n                required\n              />\n            </div>\n            <div className={styles.formGroup}>\n              <label>Thread Content</label>\n              <textarea\n                placeholder=\"Enter content\"\n                value={content}\n                onChange={(e) => setContent(e.target.value)}\n                required\n              ></textarea>\n            </div>\n            <div className={styles.modalActions}>\n              <button type=\"button\" onClick={() => setIsModalOpen(false)}>\n                Cancel\n              </button>\n              <button type=\"submit\">Create</button>\n            </div>\n          </form>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\nexport default DiscussionForum;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,MAAM,MAAM,qCAAqC;AACxD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,UAAU,EAAEC,YAAY,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1D,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAK,CAAC,GAAGP,OAAO,CAAC,CAAC;EAC1B,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACqB,cAAc,EAAEC,iBAAiB,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACuB,YAAY,EAAEC,eAAe,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACtD,MAAM,CAACyB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG1B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEhED,SAAS,CAAC,MAAM;IACd4B,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM3B,KAAK,CAAC4B,GAAG,CAAC,+BAA+B,CAAC;MACjEf,UAAU,CAACc,QAAQ,CAACE,IAAI,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAME,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;IAC3C,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAM3B,KAAK,CAACkC,IAAI,CAC/B,iCAAiCD,QAAQ,OAAO,EAChD,CAAC,CAAC,EACF;QAAEE,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUzB,IAAI,CAAC0B,KAAK;QAAG;MAAE,CACvD,CAAC;MACDxB,UAAU,CAAEyB,WAAW,IACrBA,WAAW,CAACC,GAAG,CAAEC,MAAM,IACrBA,MAAM,CAACC,GAAG,KAAKR,QAAQ,GAAG;QAAE,GAAGO,MAAM;QAAEE,KAAK,EAAEf,QAAQ,CAACE,IAAI,CAACW,MAAM,CAACE;MAAM,CAAC,GAAGF,MAC/E,CACF,CAAC;IACH,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,MAAMa,mBAAmB,GAAG,MAAOV,QAAQ,IAAK;IAC9C,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAM3B,KAAK,CAACkC,IAAI,CAC/B,iCAAiCD,QAAQ,UAAU,EACnD,CAAC,CAAC,EACF;QAAEE,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUzB,IAAI,CAAC0B,KAAK;QAAG;MAAE,CACvD,CAAC;MACDxB,UAAU,CAAEyB,WAAW,IACrBA,WAAW,CAACC,GAAG,CAAEC,MAAM,IACrBA,MAAM,CAACC,GAAG,KAAKR,QAAQ,GAAG;QAAE,GAAGO,MAAM;QAAEI,QAAQ,EAAEjB,QAAQ,CAACE,IAAI,CAACW,MAAM,CAACI;MAAS,CAAC,GAAGJ,MACrF,CACF,CAAC;IACH,CAAC,CAAC,OAAOV,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAMe,kBAAkB,GAAG,MAAOC,CAAC,IAAK;IACtCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClB,IAAI;MACF,MAAMC,MAAM,GAAGrC,IAAI,CAACsC,QAAQ;MAC5B,MAAMC,QAAQ,GAAGvC,IAAI,CAACwC,EAAE;MACxB,MAAMxB,QAAQ,GAAG,MAAM3B,KAAK,CAACkC,IAAI,CAC/B,+BAA+B,EAC/B;QAAEpB,KAAK;QAAEE,OAAO;QAAEgC,MAAM;QAAEE;MAAS,CAAC,EACpC;QAAEf,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUzB,IAAI,CAAC0B,KAAK;QAAG;MAAE,CACvD,CAAC;MACDxB,UAAU,CAAC,CAACc,QAAQ,CAACE,IAAI,CAACuB,SAAS,EAAE,GAAGxC,OAAO,CAAC,CAAC;MACjDG,QAAQ,CAAC,EAAE,CAAC;MACZE,UAAU,CAAC,EAAE,CAAC;MACdE,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,MAAMuB,iBAAiB,GAAG,MAAOpB,QAAQ,IAAK;IAC5C,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAM3B,KAAK,CAACkC,IAAI,CAC/B,iCAAiCD,QAAQ,UAAU,EACnD;QAAEjB,OAAO,EAAEM,YAAY;QAAE0B,MAAM,EAAErC,IAAI,CAACsC,QAAQ;QAAEC,QAAQ,EAAEvC,IAAI,CAACwC;MAAG,CAAC,EACnE;QAAEhB,OAAO,EAAE;UAAEC,aAAa,EAAE,UAAUzB,IAAI,CAAC0B,KAAK;QAAG;MAAE,CACvD,CAAC;MACDxB,UAAU,CAAEyB,WAAW,IACrBA,WAAW,CAACC,GAAG,CAAEC,MAAM,IACrBA,MAAM,CAACC,GAAG,KAAKR,QAAQ,GACnB;QAAE,GAAGO,MAAM;QAAEc,OAAO,EAAE3B,QAAQ,CAACE,IAAI,CAACW,MAAM,CAACc;MAAQ,CAAC,GACpDd,MACN,CACF,CAAC;MACDjB,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF,CAAC;EAED,MAAMyB,aAAa,GAAItB,QAAQ,IAAK;IAClCR,mBAAmB,CAACD,gBAAgB,KAAKS,QAAQ,GAAG,IAAI,GAAGA,QAAQ,CAAC;EACtE,CAAC;EAED,oBACEzB,OAAA;IAAKgD,SAAS,EAAErD,MAAM,CAACsD,mBAAoB;IAAAC,QAAA,gBACzClD,OAAA,CAACP,OAAO;MAAC0D,QAAQ,EAAEhD,IAAI,CAACgD,QAAS;MAACC,MAAM,EAAEjD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE8B;IAAI;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACvDxD,OAAA;MAAKgD,SAAS,EAAErD,MAAM,CAAC8D,cAAe;MAAAP,QAAA,gBACpClD,OAAA;QAAKgD,SAAS,EAAErD,MAAM,CAAC+D,gBAAiB;QAAAR,QAAA,gBACtClD,OAAA;UAAAkD,QAAA,EAAI;QAAgB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACxBrD,IAAI,iBACHH,OAAA;UACE2D,OAAO,EAAEA,CAAA,KAAMhD,cAAc,CAAC,IAAI,CAAE;UACpCqC,SAAS,EAAErD,MAAM,CAACiE,YAAa;UAAAV,QAAA,EAChC;QAED;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACNxD,OAAA;QAAKgD,SAAS,EAAErD,MAAM,CAACkE,UAAW;QAAAX,QAAA,EAC/BY,KAAK,CAACC,OAAO,CAAC3D,OAAO,CAAC,IAAIA,OAAO,CAAC4D,MAAM,GAAG,CAAC,GAC3C5D,OAAO,CAAC2B,GAAG,CAAEC,MAAM,iBACjBhC,OAAA;UAEEgD,SAAS,EAAErD,MAAM,CAACsE,UAAW;UAAAf,QAAA,gBAE7BlD,OAAA;YAAAkD,QAAA,EAAKlB,MAAM,CAAC1B;UAAK;YAAA+C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACvBxD,OAAA;YAAAkD,QAAA,EAAIlB,MAAM,CAACxB;UAAO;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvBxD,OAAA;YAAOgD,SAAS,EAAErD,MAAM,CAACuE,YAAa;YAAAhB,QAAA,GAAC,KAAG,EAAClB,MAAM,CAACQ,MAAM;UAAA;YAAAa,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACjExD,OAAA;YAAKgD,SAAS,EAAErD,MAAM,CAACwE,aAAc;YAAAjB,QAAA,gBACnClD,OAAA;cACE2D,OAAO,EAAGrB,CAAC,IAAK;gBACdA,CAAC,CAAC8B,eAAe,CAAC,CAAC;gBACnB5C,gBAAgB,CAACQ,MAAM,CAACC,GAAG,CAAC;cAC9B,CAAE;cACFe,SAAS,EAAErD,MAAM,CAAC0E,UAAW;cAAAnB,QAAA,gBAE7BlD,OAAA,CAACH,UAAU;gBAAAwD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,MAAE,EAACM,KAAK,CAACC,OAAO,CAAC/B,MAAM,CAACE,KAAK,CAAC,GAAGF,MAAM,CAACE,KAAK,CAAC8B,MAAM,GAAG,CAAC,EAAC,GACzE;YAAA;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTxD,OAAA;cACE2D,OAAO,EAAGrB,CAAC,IAAK;gBACdA,CAAC,CAAC8B,eAAe,CAAC,CAAC;gBACnBjC,mBAAmB,CAACH,MAAM,CAACC,GAAG,CAAC;cACjC,CAAE;cACFe,SAAS,EAAErD,MAAM,CAAC2E,aAAc;cAAApB,QAAA,gBAEhClD,OAAA,CAACF,YAAY;gBAAAuD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,MAAE,EAACM,KAAK,CAACC,OAAO,CAAC/B,MAAM,CAACI,QAAQ,CAAC,GAAGJ,MAAM,CAACI,QAAQ,CAAC4B,MAAM,GAAG,CAAC,EAAC,GACjF;YAAA;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTxD,OAAA;cACE2D,OAAO,EAAEA,CAAA,KAAMZ,aAAa,CAACf,MAAM,CAACC,GAAG,CAAE;cACzCe,SAAS,EAAErD,MAAM,CAAC4E,WAAY;cAAArB,QAAA,EAE7BlC,gBAAgB,KAAKgB,MAAM,CAACC,GAAG,GAAG,cAAc,GAAG;YAAc;cAAAoB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5D,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,EAGLxC,gBAAgB,KAAKgB,MAAM,CAACC,GAAG,iBAC9BjC,OAAA;YAAKgD,SAAS,EAAErD,MAAM,CAAC6E,YAAa;YAAAtB,QAAA,gBAClClD,OAAA;cAAKgD,SAAS,EAAErD,MAAM,CAAC8E,SAAU;cAAAvB,QAAA,EAC9BY,KAAK,CAACC,OAAO,CAAC/B,MAAM,CAACc,OAAO,CAAC,IAAId,MAAM,CAACc,OAAO,CAACkB,MAAM,GAAG,CAAC,GACzDhC,MAAM,CAACc,OAAO,CAACf,GAAG,CAAE2C,KAAK,iBACvB1E,OAAA;gBAAqBgD,SAAS,EAAErD,MAAM,CAACgF,SAAU;gBAAAzB,QAAA,gBAC/ClD,OAAA;kBAAAkD,QAAA,EAAIwB,KAAK,CAAClE;gBAAO;kBAAA6C,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACtBxD,OAAA;kBAAOgD,SAAS,EAAErD,MAAM,CAACiF,WAAY;kBAAA1B,QAAA,GAAC,KAAG,EAACwB,KAAK,CAAClC,MAAM;gBAAA;kBAAAa,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC;cAAA,GAFvDkB,KAAK,CAACzC,GAAG;gBAAAoB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAGd,CACN,CAAC,gBAEFxD,OAAA;gBAAAkD,QAAA,EAAG;cAAe;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG;YACtB;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACE,CAAC,eACNxD,OAAA;cAAKgD,SAAS,EAAErD,MAAM,CAACkF,SAAU;cAAA3B,QAAA,gBAC/BlD,OAAA;gBACE8E,WAAW,EAAC,kBAAkB;gBAC9BC,KAAK,EAAEjE,YAAa;gBACpBkE,QAAQ,EAAG1C,CAAC,IAAKvB,eAAe,CAACuB,CAAC,CAAC2C,MAAM,CAACF,KAAK;cAAE;gBAAA1B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAClD,CAAC,eACFxD,OAAA;gBACE2D,OAAO,EAAEA,CAAA,KAAMd,iBAAiB,CAACb,MAAM,CAACC,GAAG,CAAE;gBAC7Ce,SAAS,EAAErD,MAAM,CAACuF,iBAAkB;gBAAAhC,QAAA,EACrC;cAED;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACN,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CACN;QAAA,GA9DIxB,MAAM,CAACC,GAAG,IAAIkD,IAAI,CAACC,MAAM,CAAC,CAAC;UAAA/B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA+D7B,CACN,CAAC,gBAEFxD,OAAA;UAAAkD,QAAA,EAAG;QAAyB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAChC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAGNxD,OAAA,CAACN,KAAK;MACJ2F,MAAM,EAAE3E,WAAY;MACpB4E,cAAc,EAAEA,CAAA,KAAM3E,cAAc,CAAC,KAAK,CAAE;MAC5CqC,SAAS,EAAErD,MAAM,CAAC4F,YAAa;MAC/BC,gBAAgB,EAAE7F,MAAM,CAAC8F,YAAa;MAAAvC,QAAA,eAEtClD,OAAA;QAAKgD,SAAS,EAAErD,MAAM,CAAC4F,YAAa;QAAArC,QAAA,gBAClClD,OAAA;UAAAkD,QAAA,EAAI;QAAuB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChCxD,OAAA;UAAM0F,QAAQ,EAAErD,kBAAmB;UAAAa,QAAA,gBACjClD,OAAA;YAAKgD,SAAS,EAAErD,MAAM,CAACgG,SAAU;YAAAzC,QAAA,gBAC/BlD,OAAA;cAAAkD,QAAA,EAAO;YAAY;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC3BxD,OAAA;cACE4F,IAAI,EAAC,MAAM;cACXd,WAAW,EAAC,aAAa;cACzBC,KAAK,EAAEzE,KAAM;cACb0E,QAAQ,EAAG1C,CAAC,IAAK/B,QAAQ,CAAC+B,CAAC,CAAC2C,MAAM,CAACF,KAAK,CAAE;cAC1Cc,QAAQ;YAAA;cAAAxC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACT,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC,eACNxD,OAAA;YAAKgD,SAAS,EAAErD,MAAM,CAACgG,SAAU;YAAAzC,QAAA,gBAC/BlD,OAAA;cAAAkD,QAAA,EAAO;YAAc;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC7BxD,OAAA;cACE8E,WAAW,EAAC,eAAe;cAC3BC,KAAK,EAAEvE,OAAQ;cACfwE,QAAQ,EAAG1C,CAAC,IAAK7B,UAAU,CAAC6B,CAAC,CAAC2C,MAAM,CAACF,KAAK,CAAE;cAC5Cc,QAAQ;YAAA;cAAAxC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACT,CAAC,eACNxD,OAAA;YAAKgD,SAAS,EAAErD,MAAM,CAACmG,YAAa;YAAA5C,QAAA,gBAClClD,OAAA;cAAQ4F,IAAI,EAAC,QAAQ;cAACjC,OAAO,EAAEA,CAAA,KAAMhD,cAAc,CAAC,KAAK,CAAE;cAAAuC,QAAA,EAAC;YAE5D;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACTxD,OAAA;cAAQ4F,IAAI,EAAC,QAAQ;cAAA1C,QAAA,EAAC;YAAM;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACtD,EAAA,CAtOID,eAAe;EAAA,QACFL,OAAO;AAAA;AAAAmG,EAAA,GADpB9F,eAAe;AAwOrB,eAAeA,eAAe;AAAC,IAAA8F,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}