{"ast":null,"code":"var _jsxFileName = \"/home/rguktrkvalley/my_new_project/frontend/src/components/sideComponents/Discussions.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import Sidebar from \"../sidebar\";\n// import Modal from \"react-modal\";\n// import \"../../assets/Discussions.module.css\";\n// import { useUser } from \"../../context/UserContext\"; // Import the UserContext\n\n// const DiscussionForum = () => {\n//     const { user } = useUser();\n//   const [threads, setThreads] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedThread, setSelectedThread] = useState(null);\n//   const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchThreads();\n//   }, []);\n\n//   const fetchThreads = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/threads\");\n//       setThreads(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching threads:\", error);\n//     }\n//   };\n\n//   const handleLikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/like`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking thread:\", error);\n//     }\n//   };\n\n//   const handleDislikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/dislike`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking thread:\", error);\n//     }\n//   };\n\n//   const handleCreateThread = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:5000/api/threads\",\n//         { title, content },\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads([response.data.thread, ...threads]);\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setIsModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error creating thread:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"flex\">\n//       <Sidebar userType={user.userType} userId={user?._id}/>\n//       <div className=\"flex-1 p-6 ml-64\">\n//         <div className=\"flex justify-between mb-4\">\n//           <h1 className=\"text-2xl font-bold\">Discussion Forum</h1>\n//           {user && (\n//             <button\n//               onClick={() => setIsModalOpen(true)}\n//               className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//             >\n//               Create Discussion\n//             </button>\n//           )}\n//         </div>\n//         <div>\n//           {threads.map((thread) => (\n//             <div\n//               key={thread._id}\n//               className=\"border p-3 mb-2 rounded shadow cursor-pointer\"\n//               onClick={() => {\n//                 setSelectedThread(thread);\n//                 setReplyModalOpen(true);\n//               }}\n//             >\n//               <h2 className=\"font-semibold\">{thread.title}</h2>\n//               <p>{thread.content}</p>\n//               <small className=\"text-gray-600\">by {thread.author}</small>\n//               <div className=\"mt-2\">\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleLikeThread(thread._id);\n//                   }}\n//                   className=\"bg-green-500 text-white p-1 rounded mr-2\"\n//                 >\n//                   Like ({thread.likes.length})\n//                 </button>\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleDislikeThread(thread._id);\n//                   }}\n//                   className=\"bg-red-500 text-white p-1 rounded\"\n//                 >\n//                   Dislike ({thread.dislikes.length})\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Create Discussion Modal */}\n//       <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n//         <h2 className=\"text-xl font-bold mb-2\">Create a New Discussion</h2>\n//         <form onSubmit={handleCreateThread}>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Thread Title\"\n//             value={title}\n//             onChange={(e) => setTitle(e.target.value)}\n//             className=\"w-full p-2 border rounded mb-2\"\n//             required\n//           />\n//           <textarea\n//             placeholder=\"Thread Content\"\n//             value={content}\n//             onChange={(e) => setContent(e.target.value)}\n//             className=\"w-full p-2 border rounded mb-2\"\n//             required\n//           ></textarea>\n//           <button type=\"submit\" className=\"bg-blue-500 text-white p-2 rounded w-full\">\n//             Create\n//           </button>\n//         </form>\n//       </Modal>\n\n//       {/* Reply Modal */}\n//       <Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}>\n//         {selectedThread && (\n//           <div>\n//             <h2 className=\"text-xl font-bold\">{selectedThread.title}</h2>\n//             <p>{selectedThread.content}</p>\n//             <small className=\"text-gray-600\">by {selectedThread.author}</small>\n//             <div className=\"mt-2\">\n//               <button\n//                 onClick={() => handleLikeThread(selectedThread._id)}\n//                 className=\"bg-green-500 text-white p-1 rounded mr-2\"\n//               >\n//                 Like ({selectedThread.likes.length})\n//               </button>\n//               <button\n//                 onClick={() => handleDislikeThread(selectedThread._id)}\n//                 className=\"bg-red-500 text-white p-1 rounded\"\n//               >\n//                 Dislike ({selectedThread.dislikes.length})\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default DiscussionForum;\n\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import Sidebar from \"../sidebar\";\n// import Modal from \"react-modal\";\n// import \"../../assets/Discussions.module.css\";\n// import { useUser } from \"../../context/UserContext\";\n\n// const DiscussionForum = () => {\n//   const { user } = useUser();\n//   const [threads, setThreads] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedThread, setSelectedThread] = useState(null);\n//   const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchThreads();\n//   }, []);\n\n//   const fetchThreads = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/threads\");\n//       setThreads(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching threads:\", error);\n//     }\n//   };\n\n//   const handleLikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/like`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking thread:\", error);\n//     }\n//   };\n\n//   const handleDislikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/dislike`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking thread:\", error);\n//     }\n//   };\n\n//   const handleCreateThread = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:5000/api/threads\",\n//         { title, content },\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads([response.data.thread, ...threads]);\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setIsModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error creating thread:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"discussionContainer\">\n//       <Sidebar userType={user.userType} userId={user?._id} />\n//       <div className=\"mainDiscussion\">\n//         <div className=\"discussionHeader\">\n//           <h1>Discussion Forum</h1>\n//           {user && (\n//             <button\n//               onClick={() => setIsModalOpen(true)}\n//               className=\"createButton\"\n//             >\n//               Create Discussion\n//             </button>\n//           )}\n//         </div>\n//         <div className=\"threadList\">\n//           {threads.map((thread) => (\n//             <div\n//               key={thread._id}\n//               className=\"threadCard\"\n//               onClick={() => {\n//                 setSelectedThread(thread);\n//                 setReplyModalOpen(true);\n//               }}\n//             >\n//               <h2>{thread.title}</h2>\n//               <p>{thread.content}</p>\n//               <small className=\"threadAuthor\">by {thread.author}</small>\n//               <div className=\"mt-2\">\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleLikeThread(thread._id);\n//                   }}\n//                   className=\"likeButton\"\n//                 >\n//                   Like ({thread.likes.length})\n//                 </button>\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleDislikeThread(thread._id);\n//                   }}\n//                   className=\"dislikeButton\"\n//                 >\n//                   Dislike ({thread.dislikes.length})\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Create Discussion Modal */}\n//       <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n//         <div className=\"modalContent\">\n//           <h2>Create a New Discussion</h2>\n//           <form onSubmit={handleCreateThread}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Thread Title\"\n//               value={title}\n//               onChange={(e) => setTitle(e.target.value)}\n//               className=\"w-full p-2 border rounded mb-2\"\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Thread Content\"\n//               value={content}\n//               onChange={(e) => setContent(e.target.value)}\n//               className=\"w-full p-2 border rounded mb-2\"\n//               required\n//             ></textarea>\n//             <button type=\"submit\" className=\"createButton\">\n//               Create\n//             </button>\n//           </form>\n//         </div>\n//       </Modal>\n\n//       {/* Reply Modal */}\n//       <Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}>\n//         {selectedThread && (\n//           <div className=\"modalContent\">\n//             <h2>{selectedThread.title}</h2>\n//             <p>{selectedThread.content}</p>\n//             <small className=\"threadAuthor\">by {selectedThread.author}</small>\n//             <div className=\"mt-2\">\n//               <button\n//                 onClick={() => handleLikeThread(selectedThread._id)}\n//                 className=\"likeButton\"\n//               >\n//                 Like ({selectedThread.likes.length})\n//               </button>\n//               <button\n//                 onClick={() => handleDislikeThread(selectedThread._id)}\n//                 className=\"dislikeButton\"\n//               >\n//                 Dislike ({selectedThread.dislikes.length})\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default DiscussionForum;\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Sidebar from \"../sidebar\";\nimport Modal from \"react-modal\";\nimport styles from \"../../assets/Discussions.module.css\";\nimport { useUser } from \"../../context/UserContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DiscussionForum = () => {\n  _s();\n  const {\n    user\n  } = useUser();\n  const [threads, setThreads] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedThread, setSelectedThread] = useState(null);\n  const [replyModalOpen, setReplyModalOpen] = useState(false);\n  useEffect(() => {\n    fetchThreads();\n  }, []);\n  const fetchThreads = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/threads\");\n      setThreads(response.data);\n    } catch (error) {\n      console.error(\"Error fetching threads:\", error);\n    }\n  };\n  const handleLikeThread = async threadId => {\n    try {\n      const response = await axios.post(`http://localhost:5000/api/threads/${threadId}/like`, {}, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setThreads(prevThreads => prevThreads.map(thread => thread._id === threadId ? {\n        ...thread,\n        likes: response.data.thread.likes\n      } : thread));\n    } catch (error) {\n      console.error(\"Error liking thread:\", error);\n    }\n  };\n  const handleDislikeThread = async threadId => {\n    try {\n      const response = await axios.post(`http://localhost:5000/api/threads/${threadId}/dislike`, {}, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setThreads(prevThreads => prevThreads.map(thread => thread._id === threadId ? {\n        ...thread,\n        dislikes: response.data.thread.dislikes\n      } : thread));\n    } catch (error) {\n      console.error(\"Error disliking thread:\", error);\n    }\n  };\n  const handleCreateThread = async e => {\n    e.preventDefault();\n    try {\n      const author = user.userName;\n      const authorId = user.id;\n      const response = await axios.post(\"http://localhost:5000/threads\", {\n        title,\n        content,\n        author,\n        authorId\n      }, {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      });\n      setThreads([response.data.thread, ...threads]);\n      setTitle(\"\");\n      setContent(\"\");\n      setIsModalOpen(false);\n    } catch (error) {\n      console.error(\"Error creating thread:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.discussionContainer,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {\n      userType: user.userType,\n      userId: user === null || user === void 0 ? void 0 : user._id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.mainDiscussion,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.discussionHeader,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Discussion Forum\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 11\n        }, this), user && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setIsModalOpen(true),\n          className: styles.createButton,\n          children: \"Create Discussion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.threadList,\n        children: Array.isArray(threads) && threads.length > 0 ? threads.map(thread => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.threadCard,\n          onClick: () => {\n            setSelectedThread(thread);\n            setReplyModalOpen(true);\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: thread.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: thread.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            className: styles.threadAuthor,\n            children: [\"by \", thread.author]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => {\n                e.stopPropagation();\n                handleLikeThread(thread._id);\n              },\n              className: styles.likeButton,\n              children: [\"Like (\", thread.likes ? thread.likes.length : 0, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: e => {\n                e.stopPropagation();\n                handleDislikeThread(thread._id);\n              },\n              className: styles.dislikeButton,\n              children: [\"Dislike (\", thread.dislikes ? thread.dislikes.length : 0, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 504,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 9\n          }, this)]\n        }, thread._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 7\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No discussions available.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 5\n        }, this) // <-- Added fallback for empty threads\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      className: styles.modalContent,\n      overlayClassName: styles.modalOverlay,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.modalContent,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Create a New Discussion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleCreateThread,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.formGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Thread Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Enter title\",\n              value: title,\n              onChange: e => setTitle(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.formGroup,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Thread Content\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              placeholder: \"Enter content\",\n              value: content,\n              onChange: e => setContent(e.target.value),\n              required: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.modalActions,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: () => setIsModalOpen(false),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 9\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              children: \"Create\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 556,\n              columnNumber: 9\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 3\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), \";\", /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: replyModalOpen,\n      onRequestClose: () => setReplyModalOpen(false),\n      children: selectedThread && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.modalContent,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: selectedThread.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: selectedThread.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n          className: styles.threadAuthor,\n          children: [\"by \", selectedThread.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleLikeThread(selectedThread._id),\n            className: styles.likeButton,\n            children: [\"Like (\", selectedThread.likes.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDislikeThread(selectedThread._id),\n            className: styles.dislikeButton,\n            children: [\"Dislike (\", selectedThread.dislikes.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 466,\n    columnNumber: 5\n  }, this);\n};\n_s(DiscussionForum, \"TXtC8pydlqLq4n0jlDAL40zF7oM=\", false, function () {\n  return [useUser];\n});\n_c = DiscussionForum;\nexport default DiscussionForum;\nvar _c;\n$RefreshReg$(_c, \"DiscussionForum\");","map":{"version":3,"names":["React","useEffect","useState","axios","Sidebar","Modal","styles","useUser","jsxDEV","_jsxDEV","DiscussionForum","_s","user","threads","setThreads","title","setTitle","content","setContent","isModalOpen","setIsModalOpen","selectedThread","setSelectedThread","replyModalOpen","setReplyModalOpen","fetchThreads","response","get","data","error","console","handleLikeThread","threadId","post","headers","Authorization","token","prevThreads","map","thread","_id","likes","handleDislikeThread","dislikes","handleCreateThread","e","preventDefault","author","userName","authorId","id","className","discussionContainer","children","userType","userId","fileName","_jsxFileName","lineNumber","columnNumber","mainDiscussion","discussionHeader","onClick","createButton","threadList","Array","isArray","length","threadCard","threadAuthor","stopPropagation","likeButton","dislikeButton","isOpen","onRequestClose","modalContent","overlayClassName","modalOverlay","onSubmit","formGroup","type","placeholder","value","onChange","target","required","modalActions","_c","$RefreshReg$"],"sources":["/home/rguktrkvalley/my_new_project/frontend/src/components/sideComponents/Discussions.js"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import Sidebar from \"../sidebar\";\n// import Modal from \"react-modal\";\n// import \"../../assets/Discussions.module.css\";\n// import { useUser } from \"../../context/UserContext\"; // Import the UserContext\n\n\n// const DiscussionForum = () => {\n//     const { user } = useUser();\n//   const [threads, setThreads] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedThread, setSelectedThread] = useState(null);\n//   const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchThreads();\n//   }, []);\n\n//   const fetchThreads = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/threads\");\n//       setThreads(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching threads:\", error);\n//     }\n//   };\n\n//   const handleLikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/like`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking thread:\", error);\n//     }\n//   };\n\n//   const handleDislikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/dislike`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking thread:\", error);\n//     }\n//   };\n\n//   const handleCreateThread = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:5000/api/threads\",\n//         { title, content },\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads([response.data.thread, ...threads]);\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setIsModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error creating thread:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"flex\">\n//       <Sidebar userType={user.userType} userId={user?._id}/>\n//       <div className=\"flex-1 p-6 ml-64\">\n//         <div className=\"flex justify-between mb-4\">\n//           <h1 className=\"text-2xl font-bold\">Discussion Forum</h1>\n//           {user && (\n//             <button\n//               onClick={() => setIsModalOpen(true)}\n//               className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n//             >\n//               Create Discussion\n//             </button>\n//           )}\n//         </div>\n//         <div>\n//           {threads.map((thread) => (\n//             <div\n//               key={thread._id}\n//               className=\"border p-3 mb-2 rounded shadow cursor-pointer\"\n//               onClick={() => {\n//                 setSelectedThread(thread);\n//                 setReplyModalOpen(true);\n//               }}\n//             >\n//               <h2 className=\"font-semibold\">{thread.title}</h2>\n//               <p>{thread.content}</p>\n//               <small className=\"text-gray-600\">by {thread.author}</small>\n//               <div className=\"mt-2\">\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleLikeThread(thread._id);\n//                   }}\n//                   className=\"bg-green-500 text-white p-1 rounded mr-2\"\n//                 >\n//                   Like ({thread.likes.length})\n//                 </button>\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleDislikeThread(thread._id);\n//                   }}\n//                   className=\"bg-red-500 text-white p-1 rounded\"\n//                 >\n//                   Dislike ({thread.dislikes.length})\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Create Discussion Modal */}\n//       <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n//         <h2 className=\"text-xl font-bold mb-2\">Create a New Discussion</h2>\n//         <form onSubmit={handleCreateThread}>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Thread Title\"\n//             value={title}\n//             onChange={(e) => setTitle(e.target.value)}\n//             className=\"w-full p-2 border rounded mb-2\"\n//             required\n//           />\n//           <textarea\n//             placeholder=\"Thread Content\"\n//             value={content}\n//             onChange={(e) => setContent(e.target.value)}\n//             className=\"w-full p-2 border rounded mb-2\"\n//             required\n//           ></textarea>\n//           <button type=\"submit\" className=\"bg-blue-500 text-white p-2 rounded w-full\">\n//             Create\n//           </button>\n//         </form>\n//       </Modal>\n\n//       {/* Reply Modal */}\n//       <Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}>\n//         {selectedThread && (\n//           <div>\n//             <h2 className=\"text-xl font-bold\">{selectedThread.title}</h2>\n//             <p>{selectedThread.content}</p>\n//             <small className=\"text-gray-600\">by {selectedThread.author}</small>\n//             <div className=\"mt-2\">\n//               <button\n//                 onClick={() => handleLikeThread(selectedThread._id)}\n//                 className=\"bg-green-500 text-white p-1 rounded mr-2\"\n//               >\n//                 Like ({selectedThread.likes.length})\n//               </button>\n//               <button\n//                 onClick={() => handleDislikeThread(selectedThread._id)}\n//                 className=\"bg-red-500 text-white p-1 rounded\"\n//               >\n//                 Dislike ({selectedThread.dislikes.length})\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default DiscussionForum;\n\n\n// import React, { useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import Sidebar from \"../sidebar\";\n// import Modal from \"react-modal\";\n// import \"../../assets/Discussions.module.css\";\n// import { useUser } from \"../../context/UserContext\";\n\n// const DiscussionForum = () => {\n//   const { user } = useUser();\n//   const [threads, setThreads] = useState([]);\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [selectedThread, setSelectedThread] = useState(null);\n//   const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchThreads();\n//   }, []);\n\n//   const fetchThreads = async () => {\n//     try {\n//       const response = await axios.get(\"http://localhost:5000/api/threads\");\n//       setThreads(response.data);\n//     } catch (error) {\n//       console.error(\"Error fetching threads:\", error);\n//     }\n//   };\n\n//   const handleLikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/like`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking thread:\", error);\n//     }\n//   };\n\n//   const handleDislikeThread = async (threadId) => {\n//     try {\n//       const response = await axios.post(\n//         `http://localhost:5000/api/threads/${threadId}/dislike`,\n//         {},\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads((prevThreads) =>\n//         prevThreads.map((thread) =>\n//           thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking thread:\", error);\n//     }\n//   };\n\n//   const handleCreateThread = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:5000/api/threads\",\n//         { title, content },\n//         { headers: { Authorization: `Bearer ${user.token}` } }\n//       );\n//       setThreads([response.data.thread, ...threads]);\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setIsModalOpen(false);\n//     } catch (error) {\n//       console.error(\"Error creating thread:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"discussionContainer\">\n//       <Sidebar userType={user.userType} userId={user?._id} />\n//       <div className=\"mainDiscussion\">\n//         <div className=\"discussionHeader\">\n//           <h1>Discussion Forum</h1>\n//           {user && (\n//             <button\n//               onClick={() => setIsModalOpen(true)}\n//               className=\"createButton\"\n//             >\n//               Create Discussion\n//             </button>\n//           )}\n//         </div>\n//         <div className=\"threadList\">\n//           {threads.map((thread) => (\n//             <div\n//               key={thread._id}\n//               className=\"threadCard\"\n//               onClick={() => {\n//                 setSelectedThread(thread);\n//                 setReplyModalOpen(true);\n//               }}\n//             >\n//               <h2>{thread.title}</h2>\n//               <p>{thread.content}</p>\n//               <small className=\"threadAuthor\">by {thread.author}</small>\n//               <div className=\"mt-2\">\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleLikeThread(thread._id);\n//                   }}\n//                   className=\"likeButton\"\n//                 >\n//                   Like ({thread.likes.length})\n//                 </button>\n//                 <button\n//                   onClick={(e) => {\n//                     e.stopPropagation();\n//                     handleDislikeThread(thread._id);\n//                   }}\n//                   className=\"dislikeButton\"\n//                 >\n//                   Dislike ({thread.dislikes.length})\n//                 </button>\n//               </div>\n//             </div>\n//           ))}\n//         </div>\n//       </div>\n\n//       {/* Create Discussion Modal */}\n//       <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\n//         <div className=\"modalContent\">\n//           <h2>Create a New Discussion</h2>\n//           <form onSubmit={handleCreateThread}>\n//             <input\n//               type=\"text\"\n//               placeholder=\"Thread Title\"\n//               value={title}\n//               onChange={(e) => setTitle(e.target.value)}\n//               className=\"w-full p-2 border rounded mb-2\"\n//               required\n//             />\n//             <textarea\n//               placeholder=\"Thread Content\"\n//               value={content}\n//               onChange={(e) => setContent(e.target.value)}\n//               className=\"w-full p-2 border rounded mb-2\"\n//               required\n//             ></textarea>\n//             <button type=\"submit\" className=\"createButton\">\n//               Create\n//             </button>\n//           </form>\n//         </div>\n//       </Modal>\n\n//       {/* Reply Modal */}\n//       <Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}>\n//         {selectedThread && (\n//           <div className=\"modalContent\">\n//             <h2>{selectedThread.title}</h2>\n//             <p>{selectedThread.content}</p>\n//             <small className=\"threadAuthor\">by {selectedThread.author}</small>\n//             <div className=\"mt-2\">\n//               <button\n//                 onClick={() => handleLikeThread(selectedThread._id)}\n//                 className=\"likeButton\"\n//               >\n//                 Like ({selectedThread.likes.length})\n//               </button>\n//               <button\n//                 onClick={() => handleDislikeThread(selectedThread._id)}\n//                 className=\"dislikeButton\"\n//               >\n//                 Dislike ({selectedThread.dislikes.length})\n//               </button>\n//             </div>\n//           </div>\n//         )}\n//       </Modal>\n//     </div>\n//   );\n// };\n\n// export default DiscussionForum;\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Sidebar from \"../sidebar\";\nimport Modal from \"react-modal\";\nimport styles from \"../../assets/Discussions.module.css\";\nimport { useUser } from \"../../context/UserContext\";\n\n\nconst DiscussionForum = () => {\n  const { user } = useUser();\n  const [threads, setThreads] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedThread, setSelectedThread] = useState(null);\n  const [replyModalOpen, setReplyModalOpen] = useState(false);\n\n\n  useEffect(() => {\n    fetchThreads();\n  }, []);\n\n  const fetchThreads = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:5000/api/threads\");\n      setThreads(response.data);\n    } catch (error) {\n      console.error(\"Error fetching threads:\", error);\n    }\n  };\n\n  const handleLikeThread = async (threadId) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:5000/api/threads/${threadId}/like`,\n        {},\n        { headers: { Authorization: `Bearer ${user.token}` } }\n      );\n      setThreads((prevThreads) =>\n        prevThreads.map((thread) =>\n          thread._id === threadId ? { ...thread, likes: response.data.thread.likes } : thread\n        )\n      );\n    } catch (error) {\n      console.error(\"Error liking thread:\", error);\n    }\n  };\n\n  const handleDislikeThread = async (threadId) => {\n    try {\n      const response = await axios.post(\n        `http://localhost:5000/api/threads/${threadId}/dislike`,\n        {},\n        { headers: { Authorization: `Bearer ${user.token}` } }\n      );\n      setThreads((prevThreads) =>\n        prevThreads.map((thread) =>\n          thread._id === threadId ? { ...thread, dislikes: response.data.thread.dislikes } : thread\n        )\n      );\n    } catch (error) {\n      console.error(\"Error disliking thread:\", error);\n    }\n  };\n\n  const handleCreateThread = async (e) => {\n    e.preventDefault();\n    try {\n        const author=user.userName\n        const authorId=user.id\n      const response = await axios.post(\n        \"http://localhost:5000/threads\",\n        { title, content ,author,authorId},\n        { headers: { Authorization: `Bearer ${user.token}` } }\n      );\n      setThreads([response.data.thread, ...threads]);\n      setTitle(\"\");\n      setContent(\"\");\n      setIsModalOpen(false);\n    } catch (error) {\n      console.error(\"Error creating thread:\", error);\n    }\n  };\n\n  return (\n    <div className={styles.discussionContainer}>\n      <Sidebar userType={user.userType} userId={user?._id} />\n      <div className={styles.mainDiscussion}>\n        <div className={styles.discussionHeader}>\n          <h1>Discussion Forum</h1>\n          {user && (\n            <button\n              onClick={() => setIsModalOpen(true)}\n              className={styles.createButton}\n            >\n              Create Discussion\n            </button>\n          )}\n        </div>\n        <div className={styles.threadList}>\n  {Array.isArray(threads) && threads.length > 0 ? (\n    threads.map((thread) => (\n      <div\n        key={thread._id}\n        className={styles.threadCard}\n        onClick={() => {\n          setSelectedThread(thread);\n          setReplyModalOpen(true);\n        }}\n      >\n        <h2>{thread.title}</h2>\n        <p>{thread.content}</p>\n        <small className={styles.threadAuthor}>by {thread.author}</small>\n        <div className=\"mt-2\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              handleLikeThread(thread._id);\n            }}\n            className={styles.likeButton}\n          >\n            Like ({thread.likes ? thread.likes.length : 0})\n          </button>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              handleDislikeThread(thread._id);\n            }}\n            className={styles.dislikeButton}\n          >\n            Dislike ({thread.dislikes ? thread.dislikes.length : 0})\n          </button>\n        </div>\n      </div>\n    ))\n  ) : (\n    <p>No discussions available.</p> // <-- Added fallback for empty threads\n  )}\n</div>\n\n      </div>\n\n      \n      <Modal\n  isOpen={isModalOpen}\n  onRequestClose={() => setIsModalOpen(false)}\n  className={styles.modalContent}\n  overlayClassName={styles.modalOverlay}\n>\n  <div className={styles.modalContent}>\n    <h2>Create a New Discussion</h2>\n    <form onSubmit={handleCreateThread}>\n      <div className={styles.formGroup}>\n        <label>Thread Title</label>\n        <input\n          type=\"text\"\n          placeholder=\"Enter title\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          required\n        />\n      </div>\n      <div className={styles.formGroup}>\n        <label>Thread Content</label>\n        <textarea\n          placeholder=\"Enter content\"\n          value={content}\n          onChange={(e) => setContent(e.target.value)}\n          required\n        ></textarea>\n      </div>\n      <div className={styles.modalActions}>\n        <button type=\"button\" onClick={() => setIsModalOpen(false)}>\n          Cancel\n        </button>\n        <button type=\"submit\">Create</button>\n      </div>\n    </form>\n  </div>\n</Modal>;\n\n\n      {/* Reply Modal */}\n      <Modal isOpen={replyModalOpen} onRequestClose={() => setReplyModalOpen(false)}\n        >\n        {selectedThread && (\n          <div className={styles.modalContent}>\n            <h2>{selectedThread.title}</h2>\n            <p>{selectedThread.content}</p>\n            <small className={styles.threadAuthor}>by {selectedThread.author}</small>\n            <div className=\"mt-2\">\n              <button\n                onClick={() => handleLikeThread(selectedThread._id)}\n                className={styles.likeButton}\n              >\n                Like ({selectedThread.likes.length})\n              </button>\n              <button\n                onClick={() => handleDislikeThread(selectedThread._id)}\n                className={styles.dislikeButton}\n              >\n                Dislike ({selectedThread.dislikes.length})\n              </button>\n            </div>\n          </div>\n        )}\n      </Modal>\n    </div>\n  );\n};\n\nexport default DiscussionForum;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,MAAM,MAAM,qCAAqC;AACxD,SAASC,OAAO,QAAQ,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGpD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM;IAAEC;EAAK,CAAC,GAAGL,OAAO,CAAC,CAAC;EAC1B,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACiB,WAAW,EAAEC,cAAc,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACmB,cAAc,EAAEC,iB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}